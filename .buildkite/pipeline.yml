# SPDX-FileCopyrightText: 2020 TQ Tezos
# SPDX-License-Identifier: LicenseRef-MIT-TQ

env:
  TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER: "Y"
  # this key is defined in local-chain bootstrap accounts list in
  # https://github.com/serokell/serokell-profiles/blob/master/profiles/servers/jupiter/default.nix
  TASTY_NETTEST_IMPORT_SECRET_KEY: "unencrypted:edsk3nAQ3uCP7vc2ccLhhWNNncgFfWQ5HgTyPawepQ8DURRRfzVQzB"

steps:
  - label: hlint
    if: &not_scheduled
     build.source != "schedule"
    commands:
    - nix run -f ci.nix pkgs.hlint -c
        ./scripts/lint.sh

  - label: reuse lint
    if: *not_scheduled
    commands:
    - nix run -f ci.nix pkgs.reuse -c
        reuse lint

  - label: check trailing whitespace
    if: *not_scheduled
    commands:
    - .buildkite/check-trailing-whitespace.sh

  - label: xrefcheck
    if: *not_scheduled
    commands:
    - nix run -f ci.nix xrefcheck -c xrefcheck
    retry:
      automatic:
        limit: 1

  - label: build
    if: *not_scheduled
    commands:
    - nix-build ci.nix -A all-components

  - label: bats
    if: *not_scheduled
    commands:
    - nix run -f ci.nix
          pkgs.bats
          packages.baseDAO.exes.baseDAO
        -c bats ./scripts/test.bats

  - label: test
    if: *not_scheduled
    commands:
    - nix-build ci.nix -A packages.baseDAO.tests.baseDAO-test
    # Emulator + local chain for Delphi protocol
    - nix run -f ci.nix tezos-client -c
      ./result/bin/baseDAO-test --nettest-run-network
      -A localhost -P 8735

  - label: weeder
    if: *not_scheduled
    commands:
    - nix-build ci.nix -A weeder-script
      # weeder needs .cabal file:
    - nix run -f ci.nix pkgs.haskellPackages.hpack -c hpack
    - ./result

  - label: haddock
    if: *not_scheduled
    commands:
    - nix-build ci.nix -A haddock --no-out-link

  - label: scheduled delphinet test
    if: build.source == "schedule"
    # use another agent for long scheduled jobs
    agents:
      queue: "scheduled"
    commands:
    - nix-build ci.nix -A packages.baseDAO.tests.baseDAO-test
    # Emulator + testnet for Delphi protocol
    - nix run -f ci.nix tezos-client -c
      ./result/bin/baseDAO-test --nettest-run-network
      -A delphi.testnet.tezos.serokell.team -P 8732
    retry:
      automatic:
        limit: 1
    timeout_in_minutes: 150

# Autodoc
  - label: contract doc development
    if: build.branch != "autodoc/master" && build.branch != "master" && build.source != "schedule"
    commands:
    - nix-build ci.nix -A contracts-doc --arg release false
    - ln -s ./result/*.md .
    artifact_paths:
      - TrivialDAO.md
      - GameDAO.md

  - label: contract doc release
    if: build.branch == "master" && build.source != "schedule"
    commands:
    - nix-build ci.nix -A contracts-doc --arg release true
        --argstr commitSha "$(git rev-parse HEAD)"
        --argstr commitDate "$(git log HEAD -1 --format=%cd)"
    - ln -s ./result/*.md .
    artifact_paths:
      - TrivialDAO.md
      - GameDAO.md

  - label: xrefcheck generated doc
    soft_fail: true  # TODO: remove
    if: build.branch != "autodoc/master" && build.source != "schedule"
    commands:
    - mkdir tmp
    - if [ "$BUILDKITE_BRANCH" = "master" ];
      then CONTRACT_DOC_STEP="contract doc release";
      else CONTRACT_DOC_STEP="contract doc development";
      fi
    - buildkite-agent artifact download "*.md" tmp/
        --step "$$CONTRACT_DOC_STEP"
    - nix run -f ci.nix xrefcheck -c xrefcheck
        --mode local-only --root tmp

  - label: autodoc upload
    if: build.branch == "master" && build.source != "schedule"
    commands:
    - mkdir tmp
    - buildkite-agent artifact download "*.md" tmp/
        --step "contract doc release"
    - ./scripts/ci/upload-autodoc.sh

notify:
  - email: "tezos-alerts@serokell.io"
    if: build.state == "failed" && build.source == "schedule"
